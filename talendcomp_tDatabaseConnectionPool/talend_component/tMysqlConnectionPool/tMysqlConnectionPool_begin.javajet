<%@ jet imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
  " 
%>

<%
  CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
  INode node = (INode)codeGenArgument.getArgument();
  String cid = node.getUniqueName();
  String mode = ElementParameterParser.getValue(node, "__MODE__");
  String host = ElementParameterParser.getValue(node, "__HOST__");
  String port = ElementParameterParser.getValue(node, "__PORT__");
  String database = ElementParameterParser.getValue(node, "__DATABASE__");
  String user = ElementParameterParser.getValue(node, "__USER__");
  String password = ElementParameterParser.getValue(node, "__PASS__");
  String alias = ElementParameterParser.getValue(node, "__ALIAS__");
  String test_on_borrow = ElementParameterParser.getValue(node, "__TEST_ON_BORROW__");
  String time_between_checks = ElementParameterParser.getValue(node, "__TIME_BETWEEN_CHECKS__");
  String time_idle_connection_is_checked = ElementParameterParser.getValue(node, "__TIME_IDLE_CONNECTION_IS_CHECKED__");
  String num_connections_checked = ElementParameterParser.getValue(node, "__NUM_CONNECTIONS_CHECKED__");
  String additional_param = ElementParameterParser.getValue(node, "__ADDITIONAL_PARAM__");
  String set_initial_size = ElementParameterParser.getValue(node, "__SET_INITIAL_SIZE__");
  String initial_size = ElementParameterParser.getValue(node, "__INITIAL_SIZE__");
  String set_max_total = ElementParameterParser.getValue(node, "__SET_MAX_TOTAL__");
  String max_total = ElementParameterParser.getValue(node, "__MAX_TOTAL__");
  String set_max_wait_for_connection = ElementParameterParser.getValue(node, "__SET_MAX_WAIT_FOR_CONNECTION__");
  String max_wait_for_connection = ElementParameterParser.getValue(node, "__MAX_WAIT_FOR_CONNECTION__");
  boolean set_init_sql = "true".equals(ElementParameterParser.getValue(node, "__SET_INIT_SQL__"));
  String init_sql = ElementParameterParser.getValue(node, "__INIT_SQL__");
  if (init_sql == null || init_sql.trim().isEmpty()) {
  	init_sql = "null";
  }
  String validationSql = ElementParameterParser.getValue(node, "__VALIDATION_SQL__");
  String creationComponent = ElementParameterParser.getValue(node, "__CONNECTION_POOL__");
  boolean debug = "true".equals(ElementParameterParser.getValue(node, "__DEBUG__"));
  boolean autoCommit = "true".equals(ElementParameterParser.getValue(node, "__AUTO_COMMIT__"));
%>

<% if ("PROVIDE".equals(mode)) { %>
  // restore the map from the parent job
  if (de.cimt.talendcomp.connectionpool.BasicConnectionPool.getDsMap() != null) {
	  globalMap.put(KEY_DB_DATASOURCES, de.cimt.talendcomp.connectionpool.BasicConnectionPool.getDsMap());
  } else {
  	  System.err.println("There is no configured database pool! Components will create their own connections!");
  }
<% } else if ("CLOSE_POOL".equals(mode)) { %>
  {
  	de.cimt.talendcomp.connectionpool.BasicConnectionPool pool = (de.cimt.talendcomp.connectionpool.BasicConnectionPool) globalMap.get("<%=creationComponent%>_pool");
  	if (pool != null) {
	  	pool.close();
  	}
  }
<% } else if ("CREATE_POOL".equals(mode)) { %>

  String connectionString_<%=cid%> = "jdbc:mysql://"+<%=host%>+":"+<%=port%>+"/"+<%=database%>; 
  de.cimt.talendcomp.connectionpool.BasicConnectionPool connectionPool_<%=cid%> = new de.cimt.talendcomp.connectionpool.BasicConnectionPool(connectionString_<%=cid%>, <%=user%>, <%=password%>, "MySQL");
  connectionPool_<%=cid%>.setDebug(<%=debug%>);
  connectionPool_<%=cid%>.setAutoCommit(<%=autoCommit%>);
  connectionPool_<%=cid%>.setNumConnectionsPerCheck(<%=num_connections_checked%>);
  connectionPool_<%=cid%>.loadDriver("com.mysql.jdbc.Driver");
  connectionPool_<%=cid%>.setTestOnBorrow(<%=test_on_borrow%>);
  connectionPool_<%=cid%>.setValidationQuery(<%=validationSql%>);
  connectionPool_<%=cid%>.setAdditionalProperties(<%=additional_param%>);
  connectionPool_<%=cid%>.setTimeIdleConnectionIsChecked(<%=time_idle_connection_is_checked%>);
  connectionPool_<%=cid%>.setTimeBetweenChecks(<%=time_between_checks%>);
  <% if (set_initial_size.equals("true")){ %>
  connectionPool_<%=cid%>.setInitialSize(<%=initial_size%>);
  <% } %>
  <% if (set_max_total.equals("true")){ %>
  connectionPool_<%=cid%>.setMaxTotal(<%=max_total%>);
  <% } %>
  <% if (set_max_wait_for_connection.equals("true")){ %>
  connectionPool_<%=cid%>.setMaxWaitForConnection(<%=max_wait_for_connection%>);
  <% } %>
  <% if (set_init_sql) { %>
  connectionPool_<%=cid%>.setInitSQL(<%=init_sql%>);
  <% } %>
  try {
	// establish the connections
  	connectionPool_<%=cid%>.initializePool();
  	// fill the data source map
	@SuppressWarnings("unchecked")
  	java.util.Map<String, routines.system.TalendDataSource> dataSourceMap_<%=cid%> = (java.util.Map<String, routines.system.TalendDataSource>) globalMap.get(KEY_DB_DATASOURCES);
  	if (dataSourceMap_<%=cid%> == null) {
 		dataSourceMap_<%=cid%> = new java.util.HashMap<String, routines.system.TalendDataSource>();
	}
	globalMap.put(KEY_DB_DATASOURCES, dataSourceMap_<%=cid%>);
	de.cimt.talendcomp.connectionpool.BasicConnectionPool.setDsMap(dataSourceMap_<%=cid%>);
  	// add data source to the global list of data sources
  	dataSourceMap_<%=cid%>.put(<%=alias%>, connectionPool_<%=cid%>.getDataSource());
  	// for internal usage e.g. to close the pool
  	globalMap.put("<%=cid%>_pool",connectionPool_<%=cid%>);
  } catch (Exception e) {
  	globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
  	throw e;
  }
<% } %>